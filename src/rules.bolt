isAuth() {auth != null}
isCurrent(uid) {isAuth() && auth.uid == uid}
isNull(in) {in == null}
isDefault(in) {isAuth() && in == "default"}

hasUser(tenant, uid) {tenant.users[uid] != null}

roleOwner(tenant, uid)  {isAuth() && tenant.users[uid] == "owner"}
roleGlobal(tenant, uid) {isAuth() && tenant.users[uid] == "global"}
roleAdmin(tenant, uid)  {isAuth() && tenant.users[uid] == "admin"}
roleUser(tenant, uid)   {isAuth() && tenant.users[uid] == "user"}
roleHR(tenant, uid)     {isAuth() && tenant.users[uid] == "hr"}

getUser(uid) {root.users[uid]}
getTenant(id) {root.tenants[id]}
getRole(id) {root.roles[id]}
getSetting(id) {root.settings[id]}

isDegree9(uid) {hasUser(getTenant("degree9"), uid)}

path / is Root;
path /directory is Directory;
path /directory/blocked/{block} is DirectoryBlocked | Null;
path /directory/tenants/{tenant} is DirectoryTenants | Null;
path /directory/pending/{tenant} is DirectoryPending | Null;
path /users/{user} is User;
path /users/{user}/tenants/{tenant} is String | Null;
path /tenants/{tenant} is Tenant | Null;
path /settings/{setting} is Setting | Null;
path /roles/{role} is Role | Null;
path /billing/{tenant} is BillingTenant | Null;
path /notifications/{user} is Notifications | Null;

type Root extends Object{

  read() {isDegree9(auth.uid)}
}
type Directory extends Object{

  read() {isAuth()}
}

type DirectoryBlocked extends String{

}

type DirectoryTenants extends String{

  create() {isAuth() && isNull(prior(this))}
}

type DirectoryPending extends Object{

  create() {isAuth() && isNull(prior(this))}
}

type User extends Object{
  email: String | Null,
  name: String | Null,
  photo: String | Null,
  phone: String | Null,
  enabled: Boolean | Null,

  read()   {isCurrent(user) || isDefault(user)}
  write()  {isCurrent(user)}
}

type Tenant extends Object{
  users: Object,
  enabled: Boolean | Null,
  support: String | Null,
  industry: String | Null,
  setup: Boolean | Object | Null

  read()   {hasUser(this, auth.uid) || isDefault(tenant)}
  create() {hasUser(this, auth.uid)}
  update() {hasUser(prior(this), auth.uid)}
}

type Notifications extends Object {
  info: Notification | Null,
  success: Notification | Null,
  warning: Notification | Null,
  error: Notification | Null


  read()  {isCurrent(user) || isDefault(user)}
  write() {isCurrent(user)}
}

type Notification extends Object {
}

type Setting extends Object{
  enabled: Boolean

  read()  {true}
  write() {false}
}

type Role extends Object{

  read()  {true}
  write() {false}
}

type BillingTenant extends Object{
  token: StripeToken,
  customer: StripeCustomer
}

type StripeToken extends Object{

  read()   {roleOwner(getTenant(tenant), auth.uid)}
  write()  {roleOwner(getTenant(tenant), auth.uid)}
}

type StripeCustomer extends Object{

  read()   {roleOwner(getTenant(tenant), auth.uid)}
  write()  {roleOwner(getTenant(tenant), auth.uid)}
}
