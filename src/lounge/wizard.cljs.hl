(ns lounge.wizard
  (:refer-hoplon :exclude [form progress])
  (:require [semantic-ui.core :as semui]
            [semantic-ui.views.card :as semcard]
            [semantic-ui.elements.button :as sembtn]
            [semantic-ui.elements.container :as semcont]
            [semantic-ui.elements.divider :as semdiv]
            [semantic-ui.elements.header :as semhdr]
            [semantic-ui.elements.image :as semimg]
            [semantic-ui.elements.input :as seminpt]
            [semantic-ui.elements.list :as semlist]
            [semantic-ui.elements.step :as semsteps]
            [semantic-ui.elements.segment :as semseg]
            [semantic-ui.collections.menu :as semmenu]
            [semantic-ui.collections.message :as semmsg]
            [semantic-ui.collections.form :as semfrm]
            [semantic-ui.collections.grid :as semgrid]
            [semantic-ui.modules.popup]
            [semantic-ui.modules.modal :as modal]
            [semantic-ui.modules.progress :as semprog]
            [semantic-ui.views.item :as semitm]
            [firebase-cljs.user :as fbuser]
            [firebase-cljs.promise :as fbprom]
            [lounge.ui :as ui]
            [lounge.firebase :as fb]
            [lounge.user :as user]
            [lounge.tenant :as tenant]
            [lounge.user :as user]
            [lounge.directory :as dir]
            [lounge.datacenters :as dc]
            [lounge.forms :as forms]
            [lounge.route :as route]
            [lounge.notifications :as notify]
            [lounge.util :as util]
            [clojure.string :as s]
            [goog.crypt.base64 :as base64])
  (:require-macros [lounge.forms :refer [defv defv= deferr deferr=]]))

(def industry-stage [:industry {:title "Your Industry"
                                :label "Which best describes your business?"
                                :icon [:building :icon]}])
(def contact-stage  [:contact  {:title "Contact Info"
                                :label "Please update your profile."
                                :icon [:phone :icon]}])
(def apps-stage     [:apps     {:title "App Services"
                                :label "Which services do you need?"
                                :icon [:server :icon]}])
(def support-stage  [:support  {:title "Support"
                                :label "Select your support level."
                                :icon [:life :ring :icon]}])

(def wizard-deploy  {:stages (merge {} industry-stage apps-stage support-stage)
                     :title "Deploy a business in the cloud."
                     :description ["Limited or no existing IT."]})
(def wizard-migrate {:stages (merge {} contact-stage apps-stage support-stage)
                     :title "Migrate a business to the cloud."
                     :description ["Existing IT? Free Migration Service."]})

(def wizard-config {:deploy wizard-deploy :migrate wizard-migrate})

(defc= wizard (:setup tenant/tenant))
(defc= progress (:progress wizard))
(defc= stage (:stage wizard))
(defc= mode (:mode wizard))
(defc= wizard-stages (get-in wizard-config [(keyword mode) :stages]))
(defc= stage-label (get-in wizard-stages [(keyword stage) :label]))

(defc= wizard? (true? wizard))
(defc= migrate? (= mode "migrate"))
(defc= deploy? (= mode "deploy"))
(defc= process? (or migrate? deploy?))

(cell= (prn "wiz-stages: " wizard-stages))

(defn set-setup! [setup]
  (tenant/assoc-tenant! (:id @tenant/tenant) [:setup] setup))

(defn reset-setup! []
  (set-setup! true))

(defn set-stage! [stage]
  (tenant/assoc-tenant! (:id @tenant/tenant) [:setup :stage] stage))

(defn set-industry! [industry]
  (tenant/assoc-tenant! (:id @tenant/tenant) [:setup :industry] industry))

(defn inc-progress! []
  (tenant/assoc-tenant! (:id @tenant/tenant) [:setup :progress]
    (if @progress (inc @progress) 1)))

(defn progress! [stage]
  (set-stage! stage)
  (inc-progress!))

(defelem wizard-mode [attr kids]
  (semcard/card
    :class [:blue]
    :click (:click attr)
    (semcard/content
      (semcard/content-header (:title attr))
      (semcard/content-description
        (semlist/list
          (map semlist/item (:description attr)))))))

(defn wizard-modes []
  (map wizard-mode
    (map (fn [[mode {:keys [title description stages]}]]
      {:title title
       :description description
       :click #(set-setup! {:mode mode :stage (ffirst stages)})})
      wizard-config)))

(defelem wizard-entry [attr kids]
  (ui/row
    :toggle wizard?
    (semgrid/column
      :class [:center :aligned]
      (semhdr/h2 "Hello, what would you like to do?")
      (semcard/link-cards
        :cards 1
        :class [:centered]
        (wizard-modes)))))

(defelem wizard-process [attr kids]
  (ui/row
    :toggle mode
    (semgrid/left-column
      (semsteps/top-attached-steps
        (loop-tpl :bindings [[_ stage] wizard-stages]
          (semsteps/step :icon (:icon @stage) :title (:title @stage))))
      (semprog/progress
        :class [:bottom :attached :blue]
        :progress (cell= {:value progress :total (count wizard-stages)})
        (semprog/bar))
      (semdiv/horizontal-divider (text "~{stage-label}")))))

(defelem wizard-contact [attr kids]
  (ui/row
    :toggle (cell= (= stage "contact"))
    (semgrid/doubling-column
      :width 5
      (forms/user-info
        (ui/positive-negative-buttons
          :positive #(progress! :apps)
          :negative #(reset-setup!)
          "Cancel"
          "Submit")))))

(defelem industry-card [attr kids]
  (semcard/card
    :class [:blue]
    :click #(comp (set-industry! (:industry attr))
                  (progress! :apps))
    (semcard/content
      (semcard/content-header (:title attr))
      (semcard/content-description
        (semlist/list
          (map semlist/item (:description attr)))))))

(defn deploy-industries []
  (map industry-card
    [{:title "Restaurant or Retailer"
      :description ["Point of Sale systems."
                    "Brick and Mortar business."]
      :industry :retail}
     {:title "Professional Services"
      :description ["Accounting & Law"
                    "Architecture & Engineering"]
      :industry :professional}
     {:title "Healthcare"
      :description ["Dentists"
                    "Doctors & Pharmasists"]
      :industry :healthcare}
     {:title "Education & Government"
      :description ["Schools"
                    "Government Organizations"]
      :industry :government}
     {:title "IT & Other"
      :description ["IT Consultants" "IT Consultants"]
      :industry :other}]))

(defelem wizard-industry [attr kids]
  (ui/row
    :toggle (cell= (= stage "industry"))
    (semgrid/column
      (semcard/link-cards
        :class [:centered :stackable]
        :cards 2
        (deploy-industries)))))

(defelem wizard-apps [attr kids]
  (ui/row
    :toggle (cell= (= stage "apps"))
    (semgrid/column
      (semcard/link-cards
        :class [:centered :stackable]
        :cards 4
        (loop-tpl :bindings [_ (cell nil)]
          (semcard/card))))))

(defelem dash [attr kids]
  (ui/row
    :toggle wizard
    (semgrid/grid
      :class [:middle :aligned :stackable]
      (wizard-entry)
      (wizard-process)
      (wizard-contact)
      (wizard-industry))))
